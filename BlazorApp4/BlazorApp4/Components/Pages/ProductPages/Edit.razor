@page "/Products/edit"
@inject BlazorApp4.Data.ApplicationDbContext DB
@using BlazorApp4.Data
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Product</h4>
<hr />
@if (Product is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Product" OnValidSubmit="UpdateProduct" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Product.ProductId" value="@Product.ProductId" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Product.Name" class="form-control" />
                    <ValidationMessage For="() => Product.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="price" class="form-label">Price:</label>
                    <InputNumber id="price" @bind-Value="Product.Price" class="form-control" />
                    <ValidationMessage For="() => Product.Price" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="category" class="form-label">Category:</label>
                    <InputText id="category" @bind-Value="Product.Category" class="form-control" />
                    <ValidationMessage For="() => Product.Category" class="text-danger" />
                </div

                <div class="mb-3">
                    <label  class="form-label">Discount ID:</label>
                    <InputNumber  @bind-Value="Product.DiscountId" class="form-control" />
                </div>
                <div class="mb-3">
                    <label  class="form-label">Store ID:</label>
                    <InputNumber  @bind-Value="Product.StoreId" class="form-control" />
                </div>

                <button type="submit" class="btn btn-primary">Save</button>
                
              
                
            </EditForm>
        </div>
    </div>
    
    
}

<div>
    <a href="/products">Back to List</a>
</div>

@code {
    public string DiscountId { get; set; }
    [SupplyParameterFromQuery]
    public int ProductId { get; set; }

    [SupplyParameterFromForm]
    public Product? Product { get; set; }

    protected override async Task OnInitializedAsync()
    {

        Product ??= await DB.Products.FirstOrDefaultAsync(m => m.ProductId == ProductId);
        if (Product.Discount != null) { Product.DiscountId = Product.Discount.DiscountId; }
        if (Product is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

    }

    public async Task UpdateProduct()
    {
        Product.Discount = DB.Discounts.Find(Product.DiscountId);
        DB.Attach(Product!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ProductExists(Product!.ProductId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/products");
    }

    bool ProductExists(int productid)
    {
        return DB.Products.Any(e => e.ProductId == productid);
    }
    void Attach()
    {
        Product.Discount = DB.Discounts.Find(DiscountId);
        DB.Attach(Product!).State = EntityState.Modified;

        
            DB.SaveChangesAsync();
       
    }
}
